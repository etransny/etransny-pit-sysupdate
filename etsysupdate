#!/bin/bash
# ;;/;&
# use exit code 64 to reboot system on exit
notify(){
  logger -t $app "$*"
#  echo "$*"
}


check_update(){
  if [ $updated -eq 0 ]
  then
    apt-get update
    if [ $? -eq 0 ]
    then
      updated=1    
    else
      notify "Update to v.$1 failed in updating packages"
      exit 1
    fi
  fi

}



app=SYSUPDATE
if [ "$(id -u)" != "0" ]; then
	notify "Not root"
	exit 1
fi
etver=$(cat /etc/etransver)
updated=0
case "$etver" in
  20190110)
    myVal=$(cat /proc/cpuinfo | grep -Po '([0-9,a-f]{16})')
    # 0000000007aded27
    # 000000004c5332d9 - 2047
    # 000000002bf98ca0 - 2049
    # 00000000860aa738 - 2048
    # 000000001de5f886 - 2054
    # 00000000d22f6dd9 - 2052
    # 00000000aee84a62 - 2005 Kharkov test
    # 0000000019438c0c - 2000 Kharkov test
    # 000000004a6acad4 - 2025
#    if [ "000000004a6acad4" != "$myVal" ]
#    then
#      exit 0
#    fi
    newVer="20190124"
    notify "Updating to $newVer"
    resourceURL="https://raw.githubusercontent.com/D2Edev/et2/master/$newVer/"
    # for old files and scripts
    mkdir /usr/local/old
    # enable rtc support
    notify "Updating hw"
    echo "dtoverlay=i2c-rtc,ds1307" >> /boot/config.txt
    echo "rtc-ds1307" >> /etc/modules
    # change shieldcheck service location and boot order
    notify "Updating shieldcheck"
    systemctl disable shieldcheck.service
    systemctl stop shieldcheck.service
    rm /lib/systemd/system/shieldcheck.service
    tmpScript=$(wget --no-cache -qO- "$resourceURL"shieldcheck.service) && echo "$tmpScript" > /etc/systemd/system/shieldcheck.service
    #sed -i -- 's/pigpiod\.service/sysinit\.target\nRequires=sysinit\.target/g' /etc/systemd/system/shieldcheck.service
    #sed -i -- 's/multi-user\.target/basic\.target/g' /etc/systemd/system/shieldcheck.service
    # fix shield check script
    sed -i -- 's/sudo i2cget/i2cget/g' /usr/local/bin/shieldcheck
    # install vnstat
    notify " installing vnstat"
    apt-get install -y vnstat
    sed -i -- 's/Interface \"eth0\"/Interface \"ppp0\"/g' /etc/vnstat.conf
    systemctl restart vnstat.service
    # clean shit
    rm /usr/local/bin/wpa*
    rm /usr/local/bin/sysupdcheck*
    rm /usr/local/bin/3g*
    rm /usr/local/bin/rc3*
    # ap name configuration service
    notify "Updating wpa"
    mkdir -p /usr/local/conf/wpa_supplicant/
    mkdir -p /usr/local/conf/tunnel
    tmpScript=$(wget --no-cache -qO- "$resourceURL"configureAP) && echo "$tmpScript" > /usr/local/conf/configureAP && chmod +x /usr/local/conf/configureAP
    tmpScript=$(wget --no-cache -qO- "$resourceURL"wpa_supplicant.tmpl) && echo "$tmpScript" > /usr/local/conf/wpa_supplicant.tmpl
    if [ ! -f /usr/local/conf/wpa_supplicant/wpa_supplicant.tmpl ]; then cp /usr/local/conf/wpa_supplicant.tmpl /usr/local/conf/wpa_supplicant/wpa_supplicant.conf; fi
    tmpScript=$(wget --no-cache -qO- "$resourceURL"wpa_conf.service) && echo "$tmpScript" > /etc/systemd/system/wpa_conf.service
    rm /etc/wpa_supplicant/wpa_supplicant.conf
    sudo cp -s /usr/local/conf/wpa_supplicant/wpa_supplicant.conf /etc/wpa_supplicant/wpa_supplicant.conf
    # xconnect service
    notify "Updating xconn"
    tmpScript=$(wget --no-cache -qO- "$resourceURL"xconnect.service) && echo "$tmpScript" > /etc/systemd/system/xconnect.service
    tmpScript=$(wget --no-cache -qO- "$resourceURL"96-usb3g4gmodem.rules) && echo "$tmpScript" > /lib/udev/rules.d/96-usb3g4gmodem.rules
    rm /usr/local/bin/xgconn
    #tunnel service
    notify "Updating tunnel"
    tmpScript=$(wget --no-cache -qO- "$resourceURL"mktunnel) && echo "$tmpScript" > /usr/local/conf/mktunnel && chmod +x /usr/local/conf/mktunnel
    tmpScript=$(wget --no-cache -qO- "$resourceURL"ptunnel) && echo "$tmpScript" > /usr/local/conf/ptunnel && chmod +x /usr/local/conf/ptunnel 
    tmpScript=$(wget --no-cache -qO- "$resourceURL"tunnel.service) && echo "$tmpScript" > /etc/systemd/system/tunnel.service
    rm /home/etrans/tunnel
    rm -rf /home/etrans/.ssh   
    # clock
    notify "Updating clock"
    tmpScript=$(wget --no-cache -qO- "$resourceURL"clocks) && echo "$tmpScript" > /usr/local/conf/clocks && chmod +x /usr/local/conf/clocks
    tmpScript=$(wget --no-cache -qO- "$resourceURL"clocks.service) && echo "$tmpScript" > /etc/systemd/system/clocks.service
    # ntp sync service
    notify "Updating ntpsync"
    tmpScript=$(wget --no-cache -qO- "$resourceURL"ntpsync) && echo "$tmpScript" > /usr/local/conf/ntpsync && chmod +x /usr/local/conf/ntpsync
    tmpScript=$(wget --no-cache -qO- "$resourceURL"ntpsync.service) && echo "$tmpScript" > /etc/systemd/system/ntpsync.service
    rm /usr/local/bin/syncByNtp
    # app start service
    notify "Updating appstart"
    tmpScript=$(wget --no-cache -qO- "$resourceURL"etransapp.service) && echo "$tmpScript" > /etc/systemd/system/etransapp.service
    # sys update service
    notify "Updating sys update service"
    tmpScript=$(wget --no-cache -qO- "$resourceURL"etsys_update) && echo "$tmpScript" > /usr/local/conf/etsys_update && chmod +x /usr/local/conf/etsys_update
    tmpScript=$(wget --no-cache -qO- "$resourceURL"etsys_update.service) && echo "$tmpScript" > /etc/systemd/system/etsys_update.service
    rm /usr/local/bin/etupdate
    rm /usr/local/bin/sysupdcheck
    # gps
    notify "Updating gpssync"
    tmpScript=$(wget --no-cache -qO- "$resourceURL"gpssync) && echo "$tmpScript" > /usr/local/conf/gpssync && chmod +x /usr/local/conf/gpssync
    tmpScript=$(wget --no-cache -qO- "$resourceURL"gpssync.service) && echo "$tmpScript" > /etc/systemd/system/gpssync.service
    rm /usr/local/bin/gpstimesync
    rm /usr/local/bin/waitinet
    # app update
    notify "Updating app update service"
    tmpScript=$(wget --no-cache -qO- "$resourceURL"etapp_update.service) && echo "$tmpScript" > /etc/systemd/system/etapp_update.service
    notify "Updating rc.local"
    tmpScript=$(wget --no-cache -qO- "$resourceURL"rc.local) && echo "$tmpScript" > /etc/rc.local && chmod +x /etc/rc.local
    # waitinet
    notify "Updating waitinet"
    tmpScript=$(wget --no-cache -qO- "$resourceURL"waitinet) && echo "$tmpScript" > /usr/local/conf/waitinet && chmod +x /usr/local/conf/waitinet
    tmpScript=$(wget --no-cache -qO- "$resourceURL"waitinet.service) && echo "$tmpScript" > /etc/systemd/system/waitinet.service
    notify "Updating daemons start"    
    chown etrans:etrans -R /usr/local/conf
    systemctl stop systemd-timesyncd.service
    systemctl disable systemd-timesyncd.service
    systemctl stop fake-hwclock.service
    systemctl disable fake-hwclock.service
    systemctl daemon-reload
    systemctl enable wpa_conf.service
    systemctl enable shieldcheck.service
    systemctl enable clocks.service
    systemctl enable tunnel.service
    # xconnect started by udev
    # systemctl enable xconnect.service
    systemctl enable ntpsync.service
    systemctl enable gpssync.service
    systemctl enable waitinet.service
    systemctl enable etransapp.service
    systemctl enable etapp_update.service
    systemctl enable etsys_update.service
    echo "$newVer" > /etc/etransver
    exit 64
    ;;
#    ;& # for fallthru
20190124)
#    myVal=$(cat /proc/cpuinfo | grep -Po '([0-9,a-f]{16})')
    # 00000000aee84a62 - 2005 Kharkov test-no-shield
    # 0000000019438c0c - 2000 Kharkov test-shield
#    if [ "0000000019438c0c" != "$myVal" ]
#    then
#      exit 0
#    fi
    newVer="20190311"
    notify "Updating to $newVer"
    resourceURL="https://raw.githubusercontent.com/D2Edev/et2/master/$newVer/"
    sed -i -r -- 's/(User=etrans)/\1\nType=forking/g' /etc/systemd/system/etapp_update.service
    echo "$newVer" > /etc/etransver
    ;;
  *)
    notify "Unknown local version: $etver. Exit"
    ;;
20190311)
    myVal=$(cat /proc/cpuinfo | grep -Po '([0-9,a-f]{16})')
#     00000000aee84a62 - 2005 Kharkov test-no-shield
#     0000000019438c0c - 2000 Kharkov test-shield
    if [ "00000000aee84a62" != "$myVal" ]
    then
      exit 0
    fi
    newVer="20190315"
    notify "Updating to $newVer"
    notify "Updating sys update service"
    resourceURL="https://raw.githubusercontent.com/D2Edev/et2/master/$newVer/"
    tmpScript=$(wget --no-cache -qO- "$resourceURL"app_update) && sudo -u etrans echo "$tmpScript" > /home/etrans/app_update && chmod +x /home/etrans/app_update
    notify "Updating sys update service"
    tmpScript=$(wget --no-cache -qO- "$resourceURL"etsys_update) && echo "$tmpScript" > /usr/local/conf/etsys_update && chmod +x /usr/local/conf/etsys_update
    tmpScript=$(wget --no-cache -qO- "$resourceURL"etsys_update.service) && echo "$tmpScript" > /etc/systemd/system/etsys_update.service
    systemctl disable etapp_update.service
    systemctl daemon-reload
    echo "$newVer" > /etc/etransver
    ;;
  *)
    notify "Unknown local version: $etver. Exit"
    ;;
esac
